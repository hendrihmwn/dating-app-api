// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/hendrihmwn/dating-app-api/app/domain/service"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, params
func (_m *UserService) List(ctx context.Context, params service.UserListParams) (*service.UserListResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *service.UserListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.UserListParams) (*service.UserListResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.UserListParams) *service.UserListResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.UserListParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, params
func (_m *UserService) Login(ctx context.Context, params service.UserLoginParams) (*service.UserLoginResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *service.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.UserLoginParams) (*service.UserLoginResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.UserLoginParams) *service.UserLoginResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.UserLoginParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, params
func (_m *UserService) Register(ctx context.Context, params service.UserRegisterParams) (*service.UserLoginResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *service.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.UserRegisterParams) (*service.UserLoginResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.UserRegisterParams) *service.UserLoginResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.UserRegisterParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
