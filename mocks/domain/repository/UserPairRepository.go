// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/hendrihmwn/dating-app-api/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserPairRepository is an autogenerated mock type for the UserPairRepository type
type UserPairRepository struct {
	mock.Mock
}

// CountToday provides a mock function with given fields: ctx, userId
func (_m *UserPairRepository) CountToday(ctx context.Context, userId int64) (int, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for CountToday")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, userPair
func (_m *UserPairRepository) Create(ctx context.Context, userPair *entity.UserPair) (*entity.UserPair, error) {
	ret := _m.Called(ctx, userPair)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.UserPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserPair) (*entity.UserPair, error)); ok {
		return rf(ctx, userPair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserPair) *entity.UserPair); ok {
		r0 = rf(ctx, userPair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.UserPair) error); ok {
		r1 = rf(ctx, userPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserPairRepository creates a new instance of UserPairRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserPairRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserPairRepository {
	mock := &UserPairRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
